#!/usr/bin/env  python2
# -*- mode: python -*-
# -*- coding: utf-8 -*-

from __future__ import unicode_literals
__license__ = 'GPL v3'
__copyright__ = '2008-2016, Darko Miletic <darko.miletic at gmail.com>'
'''
clarin.com
'''

try:
    from urllib.parse import urlencode
except ImportError:
    from urllib import urlencode
from calibre import strftime
from calibre.web.feeds.news import BasicNewsRecipe


class Clarin(BasicNewsRecipe):
    title = 'Diario Clarín'
    __author__ = 'Darko Miletic, updated by GGsalas'
    description = 'Clarin.com. Noticias de la Argentina y el mundo. Información actualizada las 24 horas y en español. Informate ya'
    publisher = 'Grupo Clarin'
    category = 'news, politics, Argentina'
    oldest_article = 1
    max_articles_per_feed = 50
    use_embedded_content = False
    no_stylesheets = True
    encoding = 'utf8'
    delay = 0
    language = 'es_AR'
    publication_type = 'newspaper'
    needs_subscription = 'optional'
    INDEX = 'http://www.clarin.com'
    LOGIN = 'https://app-pase.clarin.com/pase-registracion/app/pase/ingresarNavegable?execution=e1s1'
    masthead_url = None
    cover_url = strftime('http://tapas.clarin.com/tapa/%Y/%m/%d/%Y%m%d_thumb.jpg')

    compress_news_images = True
    scale_news_images_to_device = True
    # compress_news_images_max_size = 10  # kB
    # scale_news_images = True
    # handle_gzip = True

    # To get all the data (images)
    auto_cleanup = False

    extra_css = """
      .title h1 {
        line-height: 1em;
        margin: 0 0 .5em 0;
      }
      .title .volanta {
        font-size: .5em;
        margin-bottom: .5em;
      }
      .title h2 {
        font-size: .9em;
        line-height: .9em;
        margin: 0 0 1em 0;
        font-style: italic;
      }
      .fig {
        width: 100%;
        height: auto;
      }
      .figcaption {
        font-style: italic;
        font-size: .9em;
        margin-bottom: .5em;
      }
      .author {
        font-style: italic;
        font-weight: bold;
      }
    """

    conversion_options = {
      'comment': description, 'tags': category, 'publisher': publisher, 'language': language
    }

    keep_only_tags = [
      dict(name='div', attrs={'class': 'entry-top'}),
      dict(name='div' , attrs={'class': 'box-author'}),
      dict(name='p' , attrs={'itemprop': 'author'}),
      dict(name='article' , attrs={'class': 'entry-body'}),
    ]

    remove_tags = [
      dict(name=['meta', 'base', 'link', 'iframe', 'embed', 'object']),
      dict(attrs={'class': ['title-related', 'related', 'bt-expand']}),
    ]

    remove_attributes = ['lang']

    # Images on hightlights view
    def populate_article_metadata(self, article, soup, first):
      if first and hasattr(self, 'add_toc_thumbnail'):
        picdiv = soup.find('img')
        if picdiv is not None:
          self.add_toc_thumbnail(article, picdiv['src'])


    feeds = [
     (u'Lo Ultimo', u'http://www.clarin.com/rss/lo-ultimo/'),
     (u'Politica', u'http://www.clarin.com/rss/politica/'),
     (u'Economia', u'https://www.clarin.com/rss/economia/'),
     (u'Mundo', u'http://www.clarin.com/rss/mundo/'),
     (u'Opinion', u'https://www.clarin.com/rss/opinion/'),
     (u'Cultura', u'https://www.clarin.com/rss/cultura/'),
     (u'Espectaculos', u'http://www.clarin.com/rss/espectaculos/'),
     (u'Ciudades', u'http://www.clarin.com/rss/ciudades/'),
    ]

    
    def get_browser(self):
        br = BasicNewsRecipe.get_browser(self)
        br.open(self.INDEX)
        if self.username is not None and self.password is not None:
            data = urlencode({'ingresar_ingresar_paseForm': 'ingresar_ingresar_paseForm',
                                     'ingresar_ingresar_email_paseInputComponent': self.username,
                                     'ingresar_ingresar_palabraClave_paseInputComponent': self.password,
                                     'ingresar_ingresar_ingresar_paseButton': 'Ingresar',
                                     'javax.faces.ViewState': 'e1s1'  # noqa
                                     })
            br.open(self.LOGIN, data)
        return br

    def preprocess_html(self, soup):
        for picture in soup.findAll(['picture']):
            for img in picture.findAll(['img']):
              for source in picture.findAll(['source']):
                img['src'] = source['srcset']

        for picture in soup.findAll(['picture']):
            for img in picture.findAll(['img']):
                img['class'] = 'fig'
                img['width'] = ''
                img['height'] = ''

        for figCaption in soup.findAll(['figcaption']):
            figCaption.name = 'div'
            figCaption['class'] = 'figcaption'

        for author in soup.findAll(['p'], attrs={'itemprop': 'author'}):
            author['class'] = 'author'

        return soup

    def postprocess_html(self, soup, first_fetch):
        for t in soup.findAll(['a']):
            t.name = 'strong'

        nonBreakSpace = u'\xa0'
        for empty in soup.findAll('p', string=nonBreakSpace):
            empty.extract()

        return soup
